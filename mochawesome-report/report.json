{
  "stats": {
    "suites": 6,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-28T21:52:48.401Z",
    "end": "2024-05-25T02:51:08.956Z",
    "duration": 4002,
    "testsRegistered": 16,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d956a7d8-8d02-4860-9ed6-b69305a3c42b",
      "title": "",
      "fullFile": "cypress\\e2e\\Login.cy.js",
      "file": "cypress\\e2e\\Login.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9215f9cb-ca3b-4e7a-ac19-5daa4b634209",
          "title": "Login",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve fazer login com sucesso",
              "fullTitle": "Login Deve fazer login com sucesso",
              "timedOut": null,
              "duration": 1242,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'login',\n  body: {\n    \"email\": \"fulano@qa.com\",\n    \"password\": \"teste\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body.message).to.equal('Login realizado com sucesso');\n  cy.log(response.body.authorization);\n});",
              "err": {},
              "uuid": "ecebdfa5-c7e9-4b5e-832b-0dc5b67b2860",
              "parentUUID": "9215f9cb-ca3b-4e7a-ac19-5daa4b634209",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ecebdfa5-c7e9-4b5e-832b-0dc5b67b2860"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1242,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "80ed09c4-1458-45de-b86a-349566589ef7",
      "title": "",
      "fullFile": "cypress\\e2e\\produtos.cy.js",
      "file": "cypress\\e2e\\produtos.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "58048c09-23dc-4a3a-9e4d-9a1f24de6df0",
          "title": "Testes da Funcionalidade Produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve deletar um produto previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Produtos Deve deletar um produto previamente cadastrado",
              "timedOut": null,
              "duration": 299,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto ${Math.floor(Math.random() * 1000000000)}`;\ncy.cadastrarProduto(token, produto, 250, \"descrição\", 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": 100,\n      \"descricao\": \"Produto\",\n      \"quantidade\": 100\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal(\"Registro alterado com sucesso\");\n  });\n});",
              "err": {},
              "uuid": "df40ed78-7eeb-416b-b8c2-d0a24f53aee9",
              "parentUUID": "58048c09-23dc-4a3a-9e4d-9a1f24de6df0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "df40ed78-7eeb-416b-b8c2-d0a24f53aee9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 299,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d50828e9-b7e0-4d64-a153-0d256ab77133",
      "title": "",
      "fullFile": "cypress\\e2e\\ExercicioApi.cy.js",
      "file": "cypress\\e2e\\ExercicioApi.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9f06eef7-5c79-4c29-b499-049d8619bc2d",
          "title": "Testes da Funcionalidade Usuários",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de usuários",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar contrato de usuários",
              "timedOut": null,
              "duration": 1123,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('usuarios').then(response => {\n  return _usuarios.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "1bbe7499-6030-421f-b320-bb2824ef5497",
              "parentUUID": "9f06eef7-5c79-4c29-b499-049d8619bc2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários cadastrados",
              "fullTitle": "Testes da Funcionalidade Usuários Deve listar usuários cadastrados",
              "timedOut": null,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'usuarios'\n}).then(response => {\n  expect(response.status).to.equal(200);\n});",
              "err": {},
              "uuid": "49f62ba8-41a4-4b0c-a259-53dde07915f6",
              "parentUUID": "9f06eef7-5c79-4c29-b499-049d8619bc2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um usuário com sucesso",
              "fullTitle": "Testes da Funcionalidade Usuários Deve cadastrar um usuário com sucesso",
              "timedOut": null,
              "duration": 263,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let usuario = `${faker.name.fullname}`;\nlet email = `${faker.internet.email(usuario)}`;\ncy.request({\n  method: 'POST',\n  url: 'usuarios',\n  body: {\n    \"nome\": usuario,\n    \"email\": email,\n    \"password\": \"teste\",\n    \"administrador\": \"true\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal(\"Cadastro realizado com sucesso\");\n});",
              "err": {},
              "uuid": "d1a87f47-0144-47ac-95fd-32910fb673a3",
              "parentUUID": "9f06eef7-5c79-4c29-b499-049d8619bc2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar um usuário com email inválido",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar um usuário com email inválido",
              "timedOut": null,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarUsuario('nome', 'beltrano@qa.com.br', 'teste', 'true').then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.email).to.equal(\"email deve ser um email válido\");\n});",
              "err": {},
              "uuid": "adee9755-7f62-4077-8ef6-60e7ad86fdf8",
              "parentUUID": "9f06eef7-5c79-4c29-b499-049d8619bc2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve editar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('usuarios').then(response => {\n  let id = response.body.usuarios._id;\n  let usuario = `${faker.name.fullname}`;\n  let email = `${faker.internet.email(usuario)}`;\n  cy.request({\n    method: 'POST',\n    url: 'usuarios',\n    body: {\n      \"nome\": usuario,\n      \"email\": email,\n      \"password\": \"teste\",\n      \"administrador\": \"true\"\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal(\"Cadastro realizado com sucesso\");\n    expect(response.status).to.equal(201);\n  });\n});",
              "err": {},
              "uuid": "456f202a-550a-4540-9bd3-3754ecfa787d",
              "parentUUID": "9f06eef7-5c79-4c29-b499-049d8619bc2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve deletar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 201,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let nome = `Krattos God Of War ${Math.floor(Math.random() * 1000)}`;\nlet email = `kratos.god${Math.floor(Math.random() * 1000)}@gmail.com.br`;\nlet password = `123456987${Math.floor(Math.random() * 1000)}`;\ncy.cadastrarUsuario(token, nome, email, password, \"true\").then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: \"DELETE\",\n    url: `usuarios/${id}`,\n    headers: {\n      authorization: token\n    }\n  }).then(response => {\n    expect(response.status).to.equal(200);\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n  });\n});",
              "err": {},
              "uuid": "40764564-401e-4c72-a5f4-84361ea624d2",
              "parentUUID": "9f06eef7-5c79-4c29-b499-049d8619bc2d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1bbe7499-6030-421f-b320-bb2824ef5497",
            "49f62ba8-41a4-4b0c-a259-53dde07915f6",
            "d1a87f47-0144-47ac-95fd-32910fb673a3",
            "adee9755-7f62-4077-8ef6-60e7ad86fdf8",
            "456f202a-550a-4540-9bd3-3754ecfa787d",
            "40764564-401e-4c72-a5f4-84361ea624d2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1665,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3ac0da7d-a80b-4486-94b1-8aeb9c26a52a",
      "title": "",
      "fullFile": "cypress\\e2e\\Login.cy.js",
      "file": "cypress\\e2e\\Login.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8d142863-5603-4e88-832f-055bc8b6ddb3",
          "title": "Login",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve fazer login com sucesso",
              "fullTitle": "Login Deve fazer login com sucesso",
              "timedOut": null,
              "duration": 69,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'login',\n  body: {\n    \"email\": \"fulano@qa.com\",\n    \"password\": \"teste\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body.message).to.equal('Login realizado com sucesso');\n  cy.log(response.body.authorization);\n});",
              "err": {},
              "uuid": "667eb57f-55a9-48e9-b64b-d5dcbd42bab8",
              "parentUUID": "8d142863-5603-4e88-832f-055bc8b6ddb3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "667eb57f-55a9-48e9-b64b-d5dcbd42bab8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 69,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "53acd7ea-3a67-4c65-9c11-52fd0d896b20",
      "title": "",
      "fullFile": "cypress\\e2e\\produtos.cy.js",
      "file": "cypress\\e2e\\produtos.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "84da984d-12be-4aa0-a6ac-d8dc7525d098",
          "title": "Testes da Funcionalidade Produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve deletar um produto previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Produtos Deve deletar um produto previamente cadastrado",
              "timedOut": null,
              "duration": 231,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto ${Math.floor(Math.random() * 1000000000)}`;\ncy.cadastrarProduto(token, produto, 250, \"descrição\", 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": 100,\n      \"descricao\": \"Produto\",\n      \"quantidade\": 100\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal(\"Registro alterado com sucesso\");\n  });\n});",
              "err": {},
              "uuid": "378501b3-cd6b-471d-aaad-3e69cc7efc26",
              "parentUUID": "84da984d-12be-4aa0-a6ac-d8dc7525d098",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "378501b3-cd6b-471d-aaad-3e69cc7efc26"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 231,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "90b692cf-ae12-45af-8992-99288b54ff72",
      "title": "",
      "fullFile": "cypress\\e2e\\ExercicioApi.cy.js",
      "file": "cypress\\e2e\\ExercicioApi.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fee6a553-b5af-47fe-8759-0e6c4d2cd5d9",
          "title": "Testes da Funcionalidade Usuários",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de usuários",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar contrato de usuários",
              "timedOut": null,
              "duration": 344,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('usuarios').then(response => {\n  return _usuarios.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "fb1e63e6-7751-4a46-9d33-1ec345fe0f37",
              "parentUUID": "fee6a553-b5af-47fe-8759-0e6c4d2cd5d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários cadastrados",
              "fullTitle": "Testes da Funcionalidade Usuários Deve listar usuários cadastrados",
              "timedOut": null,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'usuarios'\n}).then(response => {\n  expect(response.status).to.equal(200);\n});",
              "err": {},
              "uuid": "50803642-87c1-45cb-afb2-62997f229b71",
              "parentUUID": "fee6a553-b5af-47fe-8759-0e6c4d2cd5d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um usuário com sucesso",
              "fullTitle": "Testes da Funcionalidade Usuários Deve cadastrar um usuário com sucesso",
              "timedOut": null,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let usuario = `${faker.name.fullname}`;\nlet email = `${faker.internet.email(usuario)}`;\ncy.request({\n  method: 'POST',\n  url: 'usuarios',\n  body: {\n    \"nome\": usuario,\n    \"email\": email,\n    \"password\": \"teste\",\n    \"administrador\": \"true\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal(\"Cadastro realizado com sucesso\");\n});",
              "err": {},
              "uuid": "3593172f-b6b7-4db7-bc4f-fb8f2bd52929",
              "parentUUID": "fee6a553-b5af-47fe-8759-0e6c4d2cd5d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar um usuário com email inválido",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar um usuário com email inválido",
              "timedOut": null,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarUsuario('nome', 'beltrano@qa.com.br', 'teste', 'true').then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.email).to.equal(\"email deve ser um email válido\");\n});",
              "err": {},
              "uuid": "d98d9e9a-6213-4791-bc68-ccdfffaaab90",
              "parentUUID": "fee6a553-b5af-47fe-8759-0e6c4d2cd5d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve editar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 43,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('usuarios').then(response => {\n  let id = response.body.usuarios._id;\n  let usuario = `${faker.name.fullname}`;\n  let email = `${faker.internet.email(usuario)}`;\n  cy.request({\n    method: 'POST',\n    url: 'usuarios',\n    body: {\n      \"nome\": usuario,\n      \"email\": email,\n      \"password\": \"teste\",\n      \"administrador\": \"true\"\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal(\"Cadastro realizado com sucesso\");\n    expect(response.status).to.equal(201);\n  });\n});",
              "err": {},
              "uuid": "e48b00be-1f35-4ed5-86e4-bf88900d57d3",
              "parentUUID": "fee6a553-b5af-47fe-8759-0e6c4d2cd5d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve deletar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 45,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let nome = `Krattos God Of War ${Math.floor(Math.random() * 1000)}`;\nlet email = `kratos.god${Math.floor(Math.random() * 1000)}@gmail.com.br`;\nlet password = `123456987${Math.floor(Math.random() * 1000)}`;\ncy.cadastrarUsuario(token, nome, email, password, \"true\").then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: \"DELETE\",\n    url: `usuarios/${id}`,\n    headers: {\n      authorization: token\n    }\n  }).then(response => {\n    expect(response.status).to.equal(200);\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n  });\n});",
              "err": {},
              "uuid": "317681e5-6735-49bf-b2ba-5ccb31130a25",
              "parentUUID": "fee6a553-b5af-47fe-8759-0e6c4d2cd5d9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fb1e63e6-7751-4a46-9d33-1ec345fe0f37",
            "50803642-87c1-45cb-afb2-62997f229b71",
            "3593172f-b6b7-4db7-bc4f-fb8f2bd52929",
            "d98d9e9a-6213-4791-bc68-ccdfffaaab90",
            "e48b00be-1f35-4ed5-86e4-bf88900d57d3",
            "317681e5-6735-49bf-b2ba-5ccb31130a25"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 496,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}